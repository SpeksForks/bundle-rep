# brep/tests/bundle_arch.py
# This file is used to test the bundle representation architecture on non-RL
# tasks. Specifically, we use construct a trivial product bundle and a twisted
# bundle to test whether the architecture is capable of extracting the bundle
# structure. These motivate fiber bundle representations, which are used in RL
# environments in other brep/tests files.
# Developed by Liam McInroy, 2020/6/23.


import unittest

import numpy as np

import keras.backend as K
from keras.models import Sequential, clone_model
from keras.layers import Concatenate, Dense, Input
from keras.optimizers import RMSprop

from sklearn.base import BaseEstimator, RegressorMixin


class KerasEstimator(BaseEstimator, RegressorMixin):
    """An sklearn wrapper for a keras network.
    """

    def __init__(self, model=None, epochs=None, batch_size=None):
        """Initializes a new arbitrary keras netowrk and uses it. The given
        model should already have been compiled.

        Arguments:
            model: The keras.models.Sequential to be used. Make sure it has
                already been compiled before calling __init__.
            epochs: The number of epochs to train on.
            batch_size: The batch size to use during training.
        """
        self.model = clone_model(model)
        self.model.set_weights(model.get_weights())
        self.model.compile(loss=model.loss, optimizer=model.optimizer,
                           metrics=model.metrics,
                           loss_weights=model.loss_weights,
                           sample_weight_mode=model.sample_weight_mode,
                           weighted_metrics=model.weighted_metrics)
        self.epochs = epochs
        self.batch_size = batch_size

    def fit(self, X, y=None):
        """Fits the keras model to X, y

        Arguments:
            X: The features of the dataset
            y: The labels of the dataset.
        """
        self.model.fit(X, y, epochs=self.epochs, batch_size=self.batch_size,
                       verbose=0)

        return self

    def predict(self, X, y=None):
        """Predicts using the keras model on X
        Arguments:
            X: The features of the set to predict on
        """
        return self.model.predict_on_batch(X)

    def predict_proba(self, X, y=None):
        """Predicts the probabilities using the keras model on X.
        When using a generator, then sampling is done (since this is
        a classifier) so this gives the raw probabilities
        Arguments:
            X: The features of the dataset to get probability classes for
        """
        return self.model.predict_on_batch(X)

    def score(self, X, y=None):
        """Scores the model using keras
        Arguments:
            X: The features of the set to test on
            y: The corresponding labels
        """
        return self.model.evaluate(X, y)

    def loss(self, X, y=None):
        """Gets the loss metric
        Arguments:
            X: The features of the set to test on
            y: The corresponding labels
        """
        return self.model.evaluate(X, y)


class BRepPlan2Vec(BaseEstimator, RegressorMixin, KerasEstimator):
    """A class implementing a simple bundle representation network with the
    Plan2Vec loss. Uses the KerasEstimator class to form an sklearn type.
    """

    def __brep_plan2vec_loss__():
        """Defines the custom Bundle Representation Plan2Vec loss.
        """
        raise NotImplementedError

    def __preprocess_inputs__(X, y=None):
        """Preprocesses the input batch into the form required for training,
        loss, scoring by Bundle Representation Plan2Vec.

        Arguments:
            X: The features of the batch training set.
            y: If empty, then the labels are autogenerated. If non-empty, then
                interpreted as the true distance of states (in the maximal
                bundle representation)..
        """
        raise NotImplementedError

    def __init__(self, epochs=None, batch_size=None):
        """Initializes a new keras network for use with BRepPlan2Vec.

        Arguments:
            epochs: The number of epochs to train on.
            batch_size: The batch size to use during training.
        """
        raise NotImplementedError

    def fit(self, X, y=None):
        """Fits the given model to the given features and labels (which should
        just be the original features). In other words, the model should be
        capable firstly of reconstructing states. Additionally, there should
        be an auxiliary loss on the distance in the latent space (specifically
        that of the base maximal bundle representation) such that lifts along
        the fiber have distance equal in the feature space to that of the
        latent representation. This auxiliary loss is expressed in the hidden
        __brep_plan2vec_loss__ function.

        Note that the training method will use a batch of observation X that
        is processed by this method into a training set including the proper
        labels

        Arguments:
            X: The features of the batch training set.
            y: Should be empty. Will be ignored regardless.
        """
        return KerasEstimator.fit(self, __preprocess_inputs__(X))

    def score(self, X, y=None):
        """Scores the model using keras. Again used the preprocessing step
        discussed by fit(...).

        Arguments:
            X: The features of the set to test on
            y: The corresponding labels. If empty, then approximates. Else,
                then the labels are intrepreted as the true distance.
        """
        return KerasEstimator.score(self, __preprocess_inputs__(X))

    def loss(self, X, y=None):
        """Gets the loss metric. Again used the preprocessing step
        discussed by fit(...).

        Arguments:
            X: The features of the set to test on
            y: Should b eempty. Will be ignored regardless.
        """
        return KerasEstimator.loss(self, __preprocess_inputs__(X))
